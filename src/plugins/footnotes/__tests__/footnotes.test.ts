/*!
 * Â© 2019 Atypon Systems LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { insertInlineFootnote } from '../../../commands'
import { parseDoc, setupEditor } from '../../../testing/setup-editor'
import deletedFootnoteJson from './__fixtures__/deleted-footnote.json'
import insertedFootnoteJson from './__fixtures__/inserted-footnote.json'

jest.mock('@manuscripts/transform', () => {
  const mockTransformOriginal = jest.requireActual('@manuscripts/transform')
  return {
    ...mockTransformOriginal,
    // Inline footnotes require the id of the footnote when created thus
    // footnote IDs are generated inside the command, outside persist plugin
    generateID: () => {
      return 'MOCKED_ID'
    },
    // Ids are generated by the persist plugin in an appendTransaction
    generateNodeID: () => {
      return 'MOCKED_NODE_ID'
    },
  }
})

describe('footnotes plugin', () => {
  test("should create an inline node and footnotes section if it doesn't exist", () => {
    const expectedDoc = parseDoc(insertedFootnoteJson.doc)

    const { view } = setupEditor()
      .selectText(10)
      .command(insertInlineFootnote('footnote'))
      .insertText('a footnote')

    expect(view.state.tr.doc.toJSON()).toEqual(expectedDoc.toJSON())
    expect(view.state.tr.selection.toJSON()).toEqual(
      insertedFootnoteJson.selection
    )
    view.destroy()
  })
  test('should remove the inline node as well as the footnote on deletion', () => {
    const expectedDoc = parseDoc(deletedFootnoteJson.doc)
    const { view } = setupEditor()
      .selectText(10)
      .command(insertInlineFootnote('footnote'))
      .insertText('a footnote')
      .selectText(11)
      .backspace()

    expect(view.state.tr.doc.toJSON()).toEqual(expectedDoc.toJSON())
    expect(view.state.tr.selection.toJSON()).toEqual(
      deletedFootnoteJson.selection
    )
    view.destroy()
  })
})
